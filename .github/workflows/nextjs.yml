# Next.js 앱을 GitHub Pages에 빌드하고 배포하는 샘플 워크플로
#
# GitHub Pages로 배포하려면:
# 1. 리포지토리 설정에서 Pages 소스를 "GitHub Actions"로 설정
# 2. 이 워크플로는 main 브랜치에 푸시할 때마다 자동으로 실행됩니다
#
name: Deploy Next.js site to Pages

on:
  # main 브랜치에 푸시할 때 실행
  push:
    branches: ["main"]

  # Actions 탭에서 수동으로 실행할 수 있도록 설정
  workflow_dispatch:

# GitHub Pages에 배포하기 위한 권한 설정
permissions:
  contents: read
  pages: write
  id-token: write

# 동시 배포를 허용하지 않지만, 진행 중인 실행을 취소하고 최신 실행을 대기열에 추가
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 빌드 작업
  build:
    runs-on: ubuntu-latest
    env:
      GITHUB_ACTIONS: true
      GITHUB_PAGES: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
          
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          # GitHub Pages와 함께 사용될 때 Next.js가 정적으로 내보내지도록 자동으로 구성
          static_site_generator: next
          
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # 다음이 변경될 때마다 새 캐시 키 생성:
          # - 운영 체제, Node.js 버전, lockfile이 변경된 경우 다른 runner
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # 소스 파일이 변경되었지만 의존성이 변경되지 않은 경우, 이전 캐시에서 부분 일치로 다시 빌드
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
            
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Prepare for static build
        run: |
          # API 라우트를 임시로 비활성화 (정적 빌드용)
          mkdir -p app/api-backup
          if [ -d "app/api" ]; then
            mv app/api/* app/api-backup/ 2>/dev/null || true
          fi
          
          # 빈 API 디렉토리 생성 (빌드 오류 방지)
          mkdir -p app/api
          echo "export default function handler() { return new Response('Static build', { status: 200 }); }" > app/api/health.js

      - name: Create mock static data
        run: |
          mkdir -p lib/mock-data
          cat > lib/mock-data/posts.json << 'EOF'
          [
            {
              "id": "1",
              "title": "환영합니다!",
              "content": "이것은 정적 빌드를 위한 샘플 글입니다.",
              "category": "공지",
              "tags": ["환영", "샘플"],
              "createdAt": "2024-01-01T00:00:00Z",
              "updatedAt": "2024-01-01T00:00:00Z"
            }
          ]
          EOF
        
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # 배포 작업
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
